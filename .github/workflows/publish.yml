name: Jekyll + Builder

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2.0.3

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}
          restore-keys: ${{ runner.os }}-deno-

      - name: Run Biome check (optional)
        run: deno task check || echo "Biome check failed â€“ continuing"

      - name: Build project
        run: deno task build

      - name: Generate version tag
        id: vars
        run: |
          VERSION="v$(deno eval 'console.log(JSON.parse(Deno.readTextFileSync("deno.jsonc").replace(/\/\/.*|\/\*[\s\S]*?\*\//g, ""))["version"])')"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare releases folder
        run: |
          mkdir -p ./build/releases/${{ steps.vars.outputs.version }}
          cp -r dist/* ./build/releases/${{ steps.vars.outputs.version }}/
          rm -rf ./build/releases/latest
          mkdir -p ./build/releases/latest
          cp -r dist/* ./build/releases/latest/

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/**

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Prepare releases branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git fetch origin releases || true
          git checkout releases || git checkout --orphan releases

          # Clean everything except .git
          shopt -s extglob
          git rm -rf !(assets|.git) || true
          shopt -u extglob

          # Merge assets from main branch
          git fetch origin main
          git checkout origin/main -- assets || echo "No assets folder on main"

          VERSION=${{ needs.build.outputs.version }}

          # Create versioned folders
          mkdir -p versions/$VERSION versions/latest
          cp -r dist/* versions/$VERSION/
          cp -r dist/* versions/latest/

          # Add README as index.md
          echo "# ðŸ“¦ Release $VERSION" > versions/$VERSION/index.md
          echo "# ðŸ“¦ Latest Release" > versions/latest/index.md

          # Root README
          echo "# ðŸ“¦ Release Artifacts" > README.md
          echo "## ðŸ”— Latest" >> README.md
          echo "- [latest/](./versions/latest)" >> README.md
          echo "## ðŸ“š Versions" >> README.md
          for dir in $(ls -d versions/v* 2>/dev/null | sort -V); do
            ver=$(basename "$dir")
            echo "- [$ver](./versions/$ver)" >> README.md
          done

          cp README.md versions/README.md

          git add versions/ README.md assets
          git commit -m "Release $VERSION" || echo "No changes to commit"
          git push origin releases --force

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout releases branch
        uses: actions/checkout@v4
        with:
          ref: releases

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: Fetch main branch README
        run: |
          git fetch origin main
          git checkout origin/main -- README.md
          cp README.md index.md

      - name: Merge assets from main
        run: |
          git fetch origin main
          git checkout origin/main -- assets || echo "No assets folder on main"

      - name: Create _config.yml for Jekyll
        run: |
          echo "include:" > _config.yml
          echo "  - versions" >> _config.yml
          echo "markdown: kramdown" >> _config.yml

      - name: Build Jekyll site
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Deploy to gh-pages branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Initialize gh-pages if missing
          if ! git ls-remote --exit-code origin gh-pages; then
            git checkout --orphan gh-pages
            git rm -rf .
            git commit --allow-empty -m "Initialize gh-pages branch"
            git push origin gh-pages
          fi

          git fetch origin gh-pages

          # CLEAN workspace to prevent untracked files blocking checkout
          git reset --hard origin/gh-pages
          git clean -fdx

          git checkout gh-pages

          # Remove everything except .git and assets
          shopt -s extglob
          git rm -rf !(assets|.git) || true
          shopt -u extglob

          # Copy Jekyll site
          rsync -a _site/ ./  # assets already merged from main

          git add .
          git commit -m "Deploy site ${{ needs.build.outputs.version }}" || echo "No changes to commit"
          git push origin gh-pages --force

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3

  deploy-page:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
