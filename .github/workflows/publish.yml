name: Deploy Jekyll + Deno Builder

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write # needed for tagging + releases
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # --- Check & Build job ---
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        if: ${{ !env.ACT }}
        uses: actions/configure-pages@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2.0.3

      - name: Cache Deno deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}
          restore-keys: ${{ runner.os }}-deno-

      # âœ… Run biome check (warn only)
      - name: Run Biome check
        run: |
          deno task check || echo "Biome check failed â€“ continuing"

      # âœ… Run Deno build
      - name: Build with Deno
        run: deno task build

      # âœ… Build Jekyll site
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      # âœ… Generate version tag once
      - name: Generate version tag
        id: vars
        run: |
          VERSION="v$(deno eval 'console.log(JSON.parse(Deno.readTextFileSync("deno.jsonc").replace(/\/\/.*|\/\*[\s\S]*?\*\//g, ""))["version"])')"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # âœ… Copy dist into _site/releases/<version>
      - name: Copy dist into site
        run: |
          mkdir -p ./_site/releases/${{ steps.vars.outputs.version }}
          cp -r dist/* ./_site/releases/${{ steps.vars.outputs.version }}/

          # Update "latest"
          rm -rf ./_site/releases/latest
          mkdir -p ./_site/releases/latest
          cp -r dist/* ./_site/releases/latest/

      # âœ… Upload artifact for GitHub Pages
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3

      # âœ… Save dist as artifact (for GitHub Release)
      - name: Save dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/**

  # --- Deploy job (GitHub Pages) ---
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # --- Release + Tagging job ---
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # âœ… Use version from build
      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ needs.build.outputs.version }}
          git push origin ${{ needs.build.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.version }}
          name: Release ${{ needs.build.outputs.version }}
          body: "Automated release from CI/CD"
          files: dist/**

    # --- Archive job: push dist to branch ---
  archive:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Commit & Push dist to releases branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create or checkout releases branch
          git fetch origin releases || true
          git checkout releases || git checkout --orphan releases

          VERSION=${{ needs.build.outputs.version }}

          # Make versioned folder
          mkdir -p versions/$VERSION
          cp -r dist/* versions/$VERSION/

          # Write README for this version
          echo "# ðŸ“¦ Release $VERSION" > versions/$VERSION/README.md
          echo "" >> versions/$VERSION/README.md
          echo "Built distribution for **$VERSION**." >> versions/$VERSION/README.md
          echo "" >> versions/$VERSION/README.md
          echo "- [Back to all releases](../../)" >> versions/$VERSION/README.md

          # Update "latest"
          rm -rf versions/latest
          mkdir -p versions/latest
          cp -r dist/* versions/latest/
          echo "# ðŸ“¦ Latest Release" > versions/latest/README.md
          echo "" >> versions/latest/README.md
          echo "This folder always points to the most recent release." >> versions/latest/README.md
          echo "" >> versions/latest/README.md
          echo "- [Back to all releases](../../)" >> versions/latest/README.md

          # Rebuild top-level README
          echo "# ðŸ“¦ Release Artifacts" > README.md
          echo "" >> README.md
          echo "This branch stores built artifacts for each release." >> README.md
          echo "" >> README.md
          echo "## ðŸ”— Latest" >> README.md
          echo "- [latest/](./versions/latest)" >> README.md
          echo "" >> README.md
          echo "## ðŸ“š Versions" >> README.md
          for dir in $(ls -d versions/v* 2>/dev/null | sort -V); do
            ver=$(basename "$dir")
            echo "- [$ver](./versions/$ver)" >> README.md
          done

          git add versions/ README.md
          git commit -m "Release $VERSION"
          git push origin releases --force
